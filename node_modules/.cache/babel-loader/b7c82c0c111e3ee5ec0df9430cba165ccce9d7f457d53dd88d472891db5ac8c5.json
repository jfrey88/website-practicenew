{"ast":null,"code":"import { ref } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { useCommentStore } from '@/stores/comment';\n\n// import { onMounted } from 'vue';\n//const posts = ref([]);\n\n// import { useCommentStore } from '@/stores/comment';  \n\nexport default {\n  __name: 'AppFormComment',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const commentaire = ref({\n      name: \"\",\n      email: \"\",\n      body: \"\"\n    });\n\n    // import {clearComment } from '../../models/comments.js';\n    const route = useRoute();\n    const id = route.params.id;\n    // console.log('------------------ AppFormComment.vue --> id -----------------------');\n    // console.log(id);\n\n    const comment = useCommentStore();\n    const onSubmit = () => {\n      comment.addCommentForPost(id, commentaire.value);\n    };\n    // const clear=()=>{\n    //   clearComment(id);\n\n    // }\n    const rulesLastname = ref([value => {\n      if (value) {\n        if (value.length <= 20) {\n          if (value.trim() == \"\") {\n            return 'Le nom est obligatoire';\n          } else {\n            return true;\n          }\n        } else {\n          return 'Le nom doit avoir moins de 20 lettres';\n        }\n      } else {\n        return 'Le nom est obligatoire';\n      }\n    }]);\n    const rulesEmail = ref([value => {\n      if (value) {\n        if (/.+@.+\\..+/.test(value)) {\n          return true;\n        } else {\n          return 'l\\'adresse email doit être valide.';\n        }\n      } else {\n        return 'L\\'email est obligatoire';\n      }\n    }]);\n    const rulesComment = ref([value => {\n      if (value) {\n        if (value.length <= 2000) {\n          if (value.trim() == \"\") {\n            return 'Le commentaire est obligatoire';\n          } else {\n            return true;\n          }\n        } else {\n          return 'Le commentaire doit avoir moins de 2000 lettres';\n        }\n      } else {\n        return 'Le commentaire est obligatoire';\n      }\n    }]);\n    const clear = () => {\n      commentaire.value.body = \"\";\n      commentaire.value.email = \"\";\n      commentaire.value.name = \"\";\n    };\n    const __returned__ = {\n      commentaire,\n      route,\n      id,\n      comment,\n      onSubmit,\n      rulesLastname,\n      rulesEmail,\n      rulesComment,\n      clear,\n      ref,\n      get useRoute() {\n        return useRoute;\n      },\n      get useCommentStore() {\n        return useCommentStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","useRoute","useCommentStore","commentaire","name","email","body","route","id","params","comment","onSubmit","addCommentForPost","value","rulesLastname","length","trim","rulesEmail","test","rulesComment","clear"],"sources":["C:/Users/jfrey/Dropbox/cours/_webdev/code/semaine 4/lundi/website-practice/src/components/forms/AppFormComment.vue"],"sourcesContent":["<template>\r\n  <v-sheet class=\"mx-auto\" width=\"800\">\r\n    <v-form \r\n      >\r\n      <v-container >\r\n        \r\n        <v-row>\r\n          <v-col cols=\"12\" md=\"6\">\r\n            <v-text-field\r\n              v-model=\"commentaire.name\"\r\n              bg-color=\"purple-lighten-5\"\r\n              variant=\"solo\"\r\n              :counter=\"10\"\r\n              :rules=\"rulesLastname\"\r\n              label=\"Votre nom\"\r\n              hide-details\r\n              clearable\r\n              required\r\n            ></v-text-field>\r\n          </v-col>\r\n  \r\n          <v-col cols=\"12\" md=\"6\" >\r\n            <v-text-field\r\n             v-model=\"commentaire.email\"\r\n              prepend-inner-icon=\"mdi-email\"\r\n              bg-color=\"purple-lighten-5\"\r\n              variant=\"solo\"\r\n              :rules=\"rulesEmail\"            \r\n              label=\"Votre email\"\r\n              hide-details\r\n              clearable\r\n              required             \r\n            ></v-text-field>\r\n          </v-col>\r\n\r\n        </v-row>\r\n        <v-row>\r\n          <v-col cols=\"12\" md=\"12\">\r\n            <v-textarea\r\n             v-model=\"commentaire.body\"\r\n              prepend-inner-icon=\"mdi-comment\"\r\n              bg-color=\"purple-lighten-5\"\r\n              variant=\"solo\"\r\n              row-height=\"30\"\r\n              rows=\"4\"\r\n              :counter=\"10\"\r\n              :rules=\"rulesComment\"\r\n              label=\"Votre commenaire\"\r\n              hide-details\r\n              clearable\r\n              required             \r\n            ></v-textarea>\r\n          </v-col>\r\n        </v-row>\r\n        <v-row>\r\n          <v-col cols=\"12\" md=\"6\" >\r\n            <v-btn \r\n              class=\"mt-2\" \r\n              color=\"purple-lighten-4\"\r\n              @click=\"onSubmit\"\r\n            >Submit</v-btn>\r\n          </v-col>\r\n          <v-col cols=\"12\" md=\"6\" >\r\n            <v-btn \r\n              class=\"mt-2\" \r\n              color=\"purple-lighten-4\"\r\n             @click=\"clear()\"\r\n            >clear</v-btn>\r\n          </v-col>\r\n        </v-row>\r\n      </v-container>\r\n    </v-form>\r\n  </v-sheet>\r\n</template>\r\n  <script setup>\r\n\r\n    import { ref } from 'vue';\r\n  \r\n    \r\n    const commentaire = ref({name:\"\",\r\n    email:\"\",\r\n  body:\"\"});\r\n\r\n\r\n // import {clearComment } from '../../models/comments.js';\r\n  import {useRoute } from 'vue-router';\r\n  import { useCommentStore } from '@/stores/comment'; \r\n\r\n // import { onMounted } from 'vue';\r\n  //const posts = ref([]);\r\n\r\n // import { useCommentStore } from '@/stores/comment';  \r\n\r\n\r\n  const route = useRoute();\r\n  const id=route.params.id;\r\n  // console.log('------------------ AppFormComment.vue --> id -----------------------');\r\n  // console.log(id);\r\n\r\n  const comment = useCommentStore();\r\n    const onSubmit=()=>{\r\n      comment.addCommentForPost(id,commentaire.value);\r\n      \r\n      \r\n    }\r\n    // const clear=()=>{\r\n    //   clearComment(id);\r\n\r\n    // }\r\n    const rulesLastname = ref([\r\n    value => {\r\n      if (value) \r\n      {\r\n        if((value.length <= 20))\r\n        {\r\n          if ((value.trim())==\"\")\r\n          {\r\n            return('Le nom est obligatoire');\r\n          }else{\r\n            return true;\r\n          }\r\n          \r\n\r\n        }else{\r\n          return 'Le nom doit avoir moins de 20 lettres';\r\n        }\r\n      }else{\r\n        return('Le nom est obligatoire')\r\n      }\r\n    }\r\n  ]);\r\n  \r\n   const rulesEmail = ref([\r\n    value=>{\r\n      if (value) \r\n      {\r\n        if (/.+@.+\\..+/.test(value)) \r\n        {\r\n          return true\r\n        }else{\r\n          return 'l\\'adresse email doit être valide.'\r\n        }\r\n      }else{\r\n        return('L\\'email est obligatoire');\r\n      }\r\n    }\r\n  ]);\r\n    const rulesComment = ref([\r\n    value=>{\r\n      if (value) \r\n      {\r\n        if((value.length <= 2000))\r\n        {\r\n          if ((value.trim())==\"\")\r\n          {\r\n            return('Le commentaire est obligatoire');\r\n          }else{\r\n            return true;\r\n          }\r\n          \r\n\r\n        }else{\r\n          return 'Le commentaire doit avoir moins de 2000 lettres';\r\n        }\r\n      }else{\r\n        return('Le commentaire est obligatoire')\r\n      }\r\n    }\r\n  ]);\r\n\r\n    const clear=()=>{\r\n      commentaire.value.body=\"\";\r\n      commentaire.value.email=\"\";\r\n      commentaire.value.name=\"\";\r\n\r\n\r\n\r\n    }\r\n  \r\n   \r\n    \r\n  </script>"],"mappings":"AA4EI,SAASA,GAAG,QAAQ,KAAK;AAS3B,SAAQC,QAAQ,QAAQ,YAAY;AACpC,SAASC,eAAe,QAAQ,kBAAkB;;AAEnD;AACC;;AAED;;;;;;;;IAZG,MAAMC,WAAW,GAAGH,GAAG,CAAC;MAACI,IAAI,EAAC,EAAE;MAChCC,KAAK,EAAC,EAAE;MACVC,IAAI,EAAC;IAAE,CAAC,CAAC;;IAGV;IAUC,MAAMC,KAAK,GAAGN,QAAQ,CAAC,CAAC;IACxB,MAAMO,EAAE,GAACD,KAAK,CAACE,MAAM,CAACD,EAAE;IACxB;IACA;;IAEA,MAAME,OAAO,GAAGR,eAAe,CAAC,CAAC;IAC/B,MAAMS,QAAQ,GAACA,CAAA,KAAI;MACjBD,OAAO,CAACE,iBAAiB,CAACJ,EAAE,EAACL,WAAW,CAACU,KAAK,CAAC;IAGjD,CAAC;IACD;IACA;;IAEA;IACA,MAAMC,aAAa,GAAGd,GAAG,CAAC,CAC1Ba,KAAK,IAAI;MACP,IAAIA,KAAK,EACT;QACE,IAAIA,KAAK,CAACE,MAAM,IAAI,EAAE,EACtB;UACE,IAAKF,KAAK,CAACG,IAAI,CAAC,CAAC,IAAG,EAAE,EACtB;YACE,OAAO,wBAAwB;UACjC,CAAC,MAAI;YACH,OAAO,IAAI;UACb;QAGF,CAAC,MAAI;UACH,OAAO,uCAAuC;QAChD;MACF,CAAC,MAAI;QACH,OAAO,wBAAwB;MACjC;IACF,CAAC,CACF,CAAC;IAED,MAAMC,UAAU,GAAGjB,GAAG,CAAC,CACtBa,KAAK,IAAE;MACL,IAAIA,KAAK,EACT;QACE,IAAI,WAAW,CAACK,IAAI,CAACL,KAAK,CAAC,EAC3B;UACE,OAAO,IAAI;QACb,CAAC,MAAI;UACH,OAAO,oCAAoC;QAC7C;MACF,CAAC,MAAI;QACH,OAAO,0BAA0B;MACnC;IACF,CAAC,CACF,CAAC;IACA,MAAMM,YAAY,GAAGnB,GAAG,CAAC,CACzBa,KAAK,IAAE;MACL,IAAIA,KAAK,EACT;QACE,IAAIA,KAAK,CAACE,MAAM,IAAI,IAAI,EACxB;UACE,IAAKF,KAAK,CAACG,IAAI,CAAC,CAAC,IAAG,EAAE,EACtB;YACE,OAAO,gCAAgC;UACzC,CAAC,MAAI;YACH,OAAO,IAAI;UACb;QAGF,CAAC,MAAI;UACH,OAAO,iDAAiD;QAC1D;MACF,CAAC,MAAI;QACH,OAAO,gCAAgC;MACzC;IACF,CAAC,CACF,CAAC;IAEA,MAAMI,KAAK,GAACA,CAAA,KAAI;MACdjB,WAAW,CAACU,KAAK,CAACP,IAAI,GAAC,EAAE;MACzBH,WAAW,CAACU,KAAK,CAACR,KAAK,GAAC,EAAE;MAC1BF,WAAW,CAACU,KAAK,CAACT,IAAI,GAAC,EAAE;IAI3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}