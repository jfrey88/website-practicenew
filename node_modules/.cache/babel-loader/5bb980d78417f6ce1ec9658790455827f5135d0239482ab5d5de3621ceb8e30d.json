{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore } from \"pinia\";\nimport { useTopicStore } from '@/stores/topic';\nconst usePostStore = defineStore('post', {\n  // state est une fonction afin d'être réactive\n  // State représente la partie principale du store, \n  // c'est l'endroit qui va contenir la structure de données de l'application.\n  state: () => {\n    return {\n      posts: []\n    };\n  },\n  // Les getters représentent des methodes \n  // permettant de récupérer des données du store et \n  // de les manipuler avant sans les modifier.\n  getters: {\n    formattedPosts() {\n      return this.sortPosts.map(post => {\n        return {\n          title: post.Titre,\n          body: post.Description,\n          image: post.Image,\n          topic: post.topic,\n          topicText: post.topicText,\n          colorPost: this.colorPost(post.topic)\n        };\n      });\n    },\n    sortPosts(state) {\n      return state.posts.sort((a, b) => a.Titre.localeCompare(b.Titre));\n    },\n    colorPost(topic) {\n      const topicStore = useTopicStore();\n      console.log(topicStore);\n      return topicStore.getTopicColor(topic);\n    }\n  },\n  //les actions représentent les manipulatuions de données\n  // qui vont être effectuées sur le store.\n  actions: {\n    async fetchPosts() {\n      const response = await fetch('https://tall-otter-40.telebit.io/posts/all');\n      const posts = await response.json();\n      const topicStore = useTopicStore();\n      const addTopicField = () => {\n        const arrayPosts = [];\n        const keys = Object.keys(posts);\n        keys.forEach(topic => {\n          const tabTopicEnCours = posts[topic];\n          tabTopicEnCours.forEach(article => {\n            article.Topic = topicStore.getTopicIndex(topic);\n            article.TopicText = topic;\n            // console.log(article);\n\n            arrayPosts.push(article);\n          });\n        });\n        return arrayPosts;\n      };\n      this.posts = addTopicField();\n    }\n  }\n});\nexport { usePostStore };","map":{"version":3,"names":["defineStore","useTopicStore","usePostStore","state","posts","getters","formattedPosts","sortPosts","map","post","title","Titre","body","Description","image","Image","topic","topicText","colorPost","sort","a","b","localeCompare","topicStore","console","log","getTopicColor","actions","fetchPosts","response","fetch","json","addTopicField","arrayPosts","keys","Object","forEach","tabTopicEnCours","article","Topic","getTopicIndex","TopicText","push"],"sources":["C:/Users/jfrey/Dropbox/cours/_webdev/code/semaine 4/lundi/website-practice/src/stores/post.js"],"sourcesContent":["import { defineStore } from \"pinia\";\r\nimport { useTopicStore } from '@/stores/topic';\r\n\r\n\r\nconst usePostStore = defineStore('post', {\r\n  // state est une fonction afin d'être réactive\r\n  // State représente la partie principale du store, \r\n  // c'est l'endroit qui va contenir la structure de données de l'application.\r\n  state: () => {\r\n    return {\r\n      posts: [],\r\n    };\r\n  },\r\n  // Les getters représentent des methodes \r\n  // permettant de récupérer des données du store et \r\n  // de les manipuler avant sans les modifier.\r\n  getters: {\r\n    formattedPosts(){\r\n      return this.sortPosts.map(post =>{\r\n        return{\r\n          title : post.Titre,\r\n          body : post.Description,\r\n          image: post.Image,\r\n          topic : post.topic,\r\n          topicText : post.topicText,\r\n          colorPost :this.colorPost(post.topic)\r\n        }\r\n      })\r\n    },\r\n    sortPosts(state){\r\n      return state.posts.sort((a,b)=>a.Titre.localeCompare(b.Titre));\r\n    },\r\n    colorPost(topic){\r\n      const topicStore = useTopicStore();\r\n      console.log(topicStore);\r\n      return topicStore.getTopicColor(topic);\r\n    }\r\n\r\n  },\r\n  //les actions représentent les manipulatuions de données\r\n  // qui vont être effectuées sur le store.\r\n  actions: {\r\n    async fetchPosts() {\r\n      \r\n      const response = await fetch('https://tall-otter-40.telebit.io/posts/all');\r\n      const posts = await response.json();\r\n\r\n      const topicStore = useTopicStore();\r\n      \r\n      const addTopicField=()=>{\r\n       \r\n        const arrayPosts=[];\r\n        const keys=Object.keys(posts);\r\n        keys.forEach((topic)=>{\r\n          const tabTopicEnCours=posts[topic];\r\n          tabTopicEnCours.forEach((article)=>{\r\n           \r\n            \r\n             article.Topic = topicStore.getTopicIndex(topic);\r\n             article.TopicText = topic;\r\n            // console.log(article);\r\n            \r\n             arrayPosts.push(article);\r\n          })\r\n          \r\n        })\r\n        return arrayPosts\r\n           \r\n      }\r\n        \r\n\r\n     \r\n      this.posts = addTopicField();\r\n      }\r\n  },\r\n});\r\nexport {usePostStore};"],"mappings":";AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,aAAa,QAAQ,gBAAgB;AAG9C,MAAMC,YAAY,GAAGF,WAAW,CAAC,MAAM,EAAE;EACvC;EACA;EACA;EACAG,KAAK,EAAEA,CAAA,KAAM;IACX,OAAO;MACLC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACD;EACA;EACA;EACAC,OAAO,EAAE;IACPC,cAAcA,CAAA,EAAE;MACd,OAAO,IAAI,CAACC,SAAS,CAACC,GAAG,CAACC,IAAI,IAAG;QAC/B,OAAM;UACJC,KAAK,EAAGD,IAAI,CAACE,KAAK;UAClBC,IAAI,EAAGH,IAAI,CAACI,WAAW;UACvBC,KAAK,EAAEL,IAAI,CAACM,KAAK;UACjBC,KAAK,EAAGP,IAAI,CAACO,KAAK;UAClBC,SAAS,EAAGR,IAAI,CAACQ,SAAS;UAC1BC,SAAS,EAAE,IAAI,CAACA,SAAS,CAACT,IAAI,CAACO,KAAK;QACtC,CAAC;MACH,CAAC,CAAC;IACJ,CAAC;IACDT,SAASA,CAACJ,KAAK,EAAC;MACd,OAAOA,KAAK,CAACC,KAAK,CAACe,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC,KAAGD,CAAC,CAACT,KAAK,CAACW,aAAa,CAACD,CAAC,CAACV,KAAK,CAAC,CAAC;IAChE,CAAC;IACDO,SAASA,CAACF,KAAK,EAAC;MACd,MAAMO,UAAU,GAAGtB,aAAa,CAAC,CAAC;MAClCuB,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC;MACvB,OAAOA,UAAU,CAACG,aAAa,CAACV,KAAK,CAAC;IACxC;EAEF,CAAC;EACD;EACA;EACAW,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MAEjB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;MAC1E,MAAM1B,KAAK,GAAG,MAAMyB,QAAQ,CAACE,IAAI,CAAC,CAAC;MAEnC,MAAMR,UAAU,GAAGtB,aAAa,CAAC,CAAC;MAElC,MAAM+B,aAAa,GAACA,CAAA,KAAI;QAEtB,MAAMC,UAAU,GAAC,EAAE;QACnB,MAAMC,IAAI,GAACC,MAAM,CAACD,IAAI,CAAC9B,KAAK,CAAC;QAC7B8B,IAAI,CAACE,OAAO,CAAEpB,KAAK,IAAG;UACpB,MAAMqB,eAAe,GAACjC,KAAK,CAACY,KAAK,CAAC;UAClCqB,eAAe,CAACD,OAAO,CAAEE,OAAO,IAAG;YAGhCA,OAAO,CAACC,KAAK,GAAGhB,UAAU,CAACiB,aAAa,CAACxB,KAAK,CAAC;YAC/CsB,OAAO,CAACG,SAAS,GAAGzB,KAAK;YAC1B;;YAECiB,UAAU,CAACS,IAAI,CAACJ,OAAO,CAAC;UAC3B,CAAC,CAAC;QAEJ,CAAC,CAAC;QACF,OAAOL,UAAU;MAEnB,CAAC;MAID,IAAI,CAAC7B,KAAK,GAAG4B,aAAa,CAAC,CAAC;IAC5B;EACJ;AACF,CAAC,CAAC;AACF,SAAQ9B,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}