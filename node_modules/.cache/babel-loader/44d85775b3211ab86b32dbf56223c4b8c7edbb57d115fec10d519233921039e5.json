{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore } from \"pinia\";\nconst useCommentStore = defineStore('comment', {\n  // state est une fonction afin d'être réactive\n  // State représente la partie principale du store, \n  // c'est l'endroit qui va contenir la structure de données de l'application.\n  state: () => {\n    return {\n      comments: []\n    };\n  },\n  // Les getters représentent des methodes \n  // permettant de récupérer des données du store et \n  // de les manipuler avant sans les modifier.\n  getters: {},\n  //les actions représentent les manipulatuions de données\n  // qui vont être effectuées sur le store.\n  actions: {\n    addCommentForPost(idPost, commentaire) {\n      //on stringify le commentaire, son auteur et l'email\n\n      // let \n      let tabAncienPost = this.getCommentsForPost();\n      if (tabAncienPost === undefined) {\n        tabAncienPost = [];\n      }\n      console.log(tabAncienPost);\n      commentaire.postId = idPost;\n      tabAncienPost.push(commentaire);\n      console.log(tabAncienPost);\n    },\n    //  tabAncienPost.push(comment);\n\n    //  let chaineComment=JSON.stringify(tabAncienPost);\n\n    //  localStorage.setItem(\"commentaires\",chaineComment)\n    //on lit ce qui est dejà dans les commentaire\n\n    //localStorage.setItem(\"lastname\", comment.value.lastname);\n\n    getCommentsForPost() {\n      const chaineTabCommentaire = localStorage.getItem(\"commentaires\");\n      console.log(chaineTabCommentaire);\n      // const tabCommentaire=JSON.parse(chaineTabCommentaire);\n\n      // let tabCommentaireDeLid=[];\n\n      // for(let i=0;i<tabCommentaire.length;i++)\n      // {\n\n      //     if (tabCommentaire[i].postId==idPost)\n      //     {\n\n      //         tabCommentaireDeLid.push(tabCommentaire[i]);\n      //     }\n\n      // }\n\n      return; //tabCommentaireDeLid\n    }\n  }\n});\nexport { useCommentStore };","map":{"version":3,"names":["defineStore","useCommentStore","state","comments","getters","actions","addCommentForPost","idPost","commentaire","tabAncienPost","getCommentsForPost","undefined","console","log","postId","push","chaineTabCommentaire","localStorage","getItem"],"sources":["C:/Users/jfrey/Dropbox/cours/_webdev/code/semaine 4/lundi/website-practice/src/stores/comment.js"],"sourcesContent":["import { defineStore } from \"pinia\";\r\n\r\nconst useCommentStore = defineStore('comment', {\r\n  // state est une fonction afin d'être réactive\r\n  // State représente la partie principale du store, \r\n  // c'est l'endroit qui va contenir la structure de données de l'application.\r\n  state: () => {\r\n    return {\r\n      comments: [],\r\n    };\r\n  },\r\n  // Les getters représentent des methodes \r\n  // permettant de récupérer des données du store et \r\n  // de les manipuler avant sans les modifier.\r\n  getters: {\r\n\r\n\r\n  },\r\n  //les actions représentent les manipulatuions de données\r\n  // qui vont être effectuées sur le store.\r\n  actions: {\r\n     addCommentForPost(idPost,commentaire){\r\n  \r\n   \r\n       //on stringify le commentaire, son auteur et l'email\r\n       \r\n     // let \r\n       let tabAncienPost= this.getCommentsForPost();\r\n       if (tabAncienPost===undefined)\r\n       {\r\n        tabAncienPost=[];\r\n       }\r\n       console.log(tabAncienPost);\r\n       commentaire.postId=idPost;\r\n       tabAncienPost.push(commentaire);\r\n       console.log(tabAncienPost);\r\n       },\r\n        \r\n      //  tabAncienPost.push(comment);\r\n   \r\n      //  let chaineComment=JSON.stringify(tabAncienPost);\r\n   \r\n   \r\n      //  localStorage.setItem(\"commentaires\",chaineComment)\r\n       //on lit ce qui est dejà dans les commentaire\r\n   \r\n       //localStorage.setItem(\"lastname\", comment.value.lastname);\r\n   \r\n   \r\n    getCommentsForPost(){\r\n      const chaineTabCommentaire=localStorage.getItem(\"commentaires\");\r\n      console.log(chaineTabCommentaire);\r\n    // const tabCommentaire=JSON.parse(chaineTabCommentaire);\r\n    \r\n    // let tabCommentaireDeLid=[];\r\n\r\n    // for(let i=0;i<tabCommentaire.length;i++)\r\n    // {\r\n  \r\n    //     if (tabCommentaire[i].postId==idPost)\r\n    //     {\r\n  \r\n    //         tabCommentaireDeLid.push(tabCommentaire[i]);\r\n    //     }\r\n\r\n    // }\r\n  \r\n    return //tabCommentaireDeLid\r\n}\r\n  },\r\n});\r\nexport {useCommentStore};"],"mappings":";AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,MAAMC,eAAe,GAAGD,WAAW,CAAC,SAAS,EAAE;EAC7C;EACA;EACA;EACAE,KAAK,EAAEA,CAAA,KAAM;IACX,OAAO;MACLC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD;EACA;EACA;EACAC,OAAO,EAAE,CAGT,CAAC;EACD;EACA;EACAC,OAAO,EAAE;IACNC,iBAAiBA,CAACC,MAAM,EAACC,WAAW,EAAC;MAGnC;;MAEF;MACE,IAAIC,aAAa,GAAE,IAAI,CAACC,kBAAkB,CAAC,CAAC;MAC5C,IAAID,aAAa,KAAGE,SAAS,EAC7B;QACCF,aAAa,GAAC,EAAE;MACjB;MACAG,OAAO,CAACC,GAAG,CAACJ,aAAa,CAAC;MAC1BD,WAAW,CAACM,MAAM,GAACP,MAAM;MACzBE,aAAa,CAACM,IAAI,CAACP,WAAW,CAAC;MAC/BI,OAAO,CAACC,GAAG,CAACJ,aAAa,CAAC;IAC1B,CAAC;IAEF;;IAEA;;IAGA;IACC;;IAEA;;IAGHC,kBAAkBA,CAAA,EAAE;MAClB,MAAMM,oBAAoB,GAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MAC/DN,OAAO,CAACC,GAAG,CAACG,oBAAoB,CAAC;MACnC;;MAEA;;MAEA;MACA;;MAEA;MACA;;MAEA;MACA;;MAEA;;MAEA,OAAM,CAAC;IACX;EACE;AACF,CAAC,CAAC;AACF,SAAQf,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}