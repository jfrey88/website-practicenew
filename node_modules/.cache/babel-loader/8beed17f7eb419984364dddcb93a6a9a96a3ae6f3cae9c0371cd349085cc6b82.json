{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst comments = async idPost => {\n  //const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${idPost}/comments`);\n  //const data = await response.json();  \n  //console.log(data)\n  let data = [];\n  const tabRec = getCommentsForPost(idPost);\n  //console.log(tabRec);    \n  tabRec.forEach(element => {\n    element.id = data.length + 1;\n    // console.log(element);\n    data.push(element);\n  });\n  //data.push(rec);\n  return data;\n};\nconst getCommentsForPost = idPost => {\n  const chaineTabCommentaire = localStorage.getItem(\"commentaires\");\n  const tabCommentaire = JSON.parse(chaineTabCommentaire);\n  let tabCommentaireDeLid = [];\n  console.log(tabCommentaireDeLid);\n  console.log(tabCommentaire);\n  for (let i = 0; i < tabCommentaire.length; i++) {\n    console.log('postId comm =', tabCommentaire[i].postId, ' idPost=', idPost, ' test :', tabCommentaire[i].postId == idPost);\n    if (tabCommentaire[i].postId == idPost) {\n      console.log('je suis ici');\n      tabCommentaireDeLid.push(tabCommentaire[i]);\n    }\n    console.log(tabCommentaireDeLid);\n  }\n  return tabCommentaireDeLid;\n};\nconst addCommentForPost = (idPost, comment) => {\n  // console.log(\"le commentaire brut \",comment);\n\n  //on stringify le commentaire, son auteur et l'email\n\n  let tabAncienPost = getCommentsForPost(idPost);\n  comment.postId = idPost;\n  tabAncienPost.push(comment);\n  //console.log(tabAncienPost);\n  let chaineComment = JSON.stringify(tabAncienPost);\n  //console.log(chaineComment);\n\n  localStorage.setItem(\"commentaires\", chaineComment);\n  //on lit ce qui est dejà dans les commentaire\n\n  //localStorage.setItem(\"lastname\", comment.value.lastname);\n};\nconst clearComment = idPost => {\n  const chaineTabCommentaire = localStorage.getItem(\"commentaires\");\n  const tabCommentaire = JSON.parse(chaineTabCommentaire);\n  console.log(tabCommentaire);\n  tabCommentaire.forEach(function (item, index, objet) {\n    if (item.postId == idPost) {\n      objet.splice(index, 1);\n    }\n  });\n  console.log(tabCommentaire);\n  return tabCommentaire;\n};\nexport { comments, addCommentForPost, clearComment };","map":{"version":3,"names":["comments","idPost","data","tabRec","getCommentsForPost","forEach","element","id","length","push","chaineTabCommentaire","localStorage","getItem","tabCommentaire","JSON","parse","tabCommentaireDeLid","console","log","i","postId","addCommentForPost","comment","tabAncienPost","chaineComment","stringify","setItem","clearComment","item","index","objet","splice"],"sources":["C:/Users/jfrey/Dropbox/cours/_webdev/code/semaine 4/lundi/website-practice/src/models/comments.js"],"sourcesContent":["const comments = async(idPost)=>{       \r\n    //const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${idPost}/comments`);\r\n    //const data = await response.json();  \r\n    //console.log(data)\r\n    let data=[];\r\n    const tabRec=getCommentsForPost(idPost);\r\n    //console.log(tabRec);    \r\n    tabRec.forEach((element) =>{\r\n        element.id=data.length+1;\r\n       // console.log(element);\r\n        data.push(element)\r\n    })\r\n    //data.push(rec);\r\n    return data;\r\n}\r\n\r\nconst getCommentsForPost=(idPost)=>{\r\n    const chaineTabCommentaire=localStorage.getItem(\"commentaires\");\r\n    \r\n    const tabCommentaire=JSON.parse(chaineTabCommentaire);\r\n    \r\n    let tabCommentaireDeLid=[];\r\n    console.log(tabCommentaireDeLid);\r\n    console.log(tabCommentaire);\r\n    for(let i=0;i<tabCommentaire.length;i++)\r\n    {\r\n        console.log('postId comm =',tabCommentaire[i].postId,' idPost=',idPost,' test :',tabCommentaire[i].postId==idPost);\r\n        if (tabCommentaire[i].postId==idPost)\r\n        {\r\n            console.log('je suis ici');\r\n            tabCommentaireDeLid.push(tabCommentaire[i]);\r\n        }\r\n        console.log(tabCommentaireDeLid);\r\n    }\r\n  \r\n    return tabCommentaireDeLid\r\n}\r\n\r\nconst addCommentForPost=(idPost,comment)=>{\r\n   // console.log(\"le commentaire brut \",comment);\r\n\r\n    //on stringify le commentaire, son auteur et l'email\r\n    \r\n\r\n    let tabAncienPost= getCommentsForPost(idPost);\r\n    comment.postId=idPost;\r\n    tabAncienPost.push(comment);\r\n    //console.log(tabAncienPost);\r\n    let chaineComment=JSON.stringify(tabAncienPost);\r\n    //console.log(chaineComment);\r\n\r\n    localStorage.setItem(\"commentaires\",chaineComment)\r\n    //on lit ce qui est dejà dans les commentaire\r\n\r\n    //localStorage.setItem(\"lastname\", comment.value.lastname);\r\n\r\n}\r\n\r\nconst clearComment=(idPost)=>{\r\n    const chaineTabCommentaire=localStorage.getItem(\"commentaires\");\r\n    \r\n    const tabCommentaire=JSON.parse(chaineTabCommentaire);\r\n    console.log(tabCommentaire)\r\n    tabCommentaire.forEach(function(item,index,objet)\r\n        {\r\n            \r\n            if (item.postId==idPost)\r\n            {\r\n                \r\n                objet.splice(index,1);\r\n            }\r\n           \r\n        })\r\n        console.log(tabCommentaire)\r\n        return tabCommentaire  \r\n}\r\n\r\n\r\nexport {comments,addCommentForPost,clearComment}"],"mappings":";AAAA,MAAMA,QAAQ,GAAG,MAAMC,MAAM,IAAG;EAC5B;EACA;EACA;EACA,IAAIC,IAAI,GAAC,EAAE;EACX,MAAMC,MAAM,GAACC,kBAAkB,CAACH,MAAM,CAAC;EACvC;EACAE,MAAM,CAACE,OAAO,CAAEC,OAAO,IAAI;IACvBA,OAAO,CAACC,EAAE,GAACL,IAAI,CAACM,MAAM,GAAC,CAAC;IACzB;IACCN,IAAI,CAACO,IAAI,CAACH,OAAO,CAAC;EACtB,CAAC,CAAC;EACF;EACA,OAAOJ,IAAI;AACf,CAAC;AAED,MAAME,kBAAkB,GAAEH,MAAM,IAAG;EAC/B,MAAMS,oBAAoB,GAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAE/D,MAAMC,cAAc,GAACC,IAAI,CAACC,KAAK,CAACL,oBAAoB,CAAC;EAErD,IAAIM,mBAAmB,GAAC,EAAE;EAC1BC,OAAO,CAACC,GAAG,CAACF,mBAAmB,CAAC;EAChCC,OAAO,CAACC,GAAG,CAACL,cAAc,CAAC;EAC3B,KAAI,IAAIM,CAAC,GAAC,CAAC,EAACA,CAAC,GAACN,cAAc,CAACL,MAAM,EAACW,CAAC,EAAE,EACvC;IACIF,OAAO,CAACC,GAAG,CAAC,eAAe,EAACL,cAAc,CAACM,CAAC,CAAC,CAACC,MAAM,EAAC,UAAU,EAACnB,MAAM,EAAC,SAAS,EAACY,cAAc,CAACM,CAAC,CAAC,CAACC,MAAM,IAAEnB,MAAM,CAAC;IAClH,IAAIY,cAAc,CAACM,CAAC,CAAC,CAACC,MAAM,IAAEnB,MAAM,EACpC;MACIgB,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC1BF,mBAAmB,CAACP,IAAI,CAACI,cAAc,CAACM,CAAC,CAAC,CAAC;IAC/C;IACAF,OAAO,CAACC,GAAG,CAACF,mBAAmB,CAAC;EACpC;EAEA,OAAOA,mBAAmB;AAC9B,CAAC;AAED,MAAMK,iBAAiB,GAACA,CAACpB,MAAM,EAACqB,OAAO,KAAG;EACvC;;EAEC;;EAGA,IAAIC,aAAa,GAAEnB,kBAAkB,CAACH,MAAM,CAAC;EAC7CqB,OAAO,CAACF,MAAM,GAACnB,MAAM;EACrBsB,aAAa,CAACd,IAAI,CAACa,OAAO,CAAC;EAC3B;EACA,IAAIE,aAAa,GAACV,IAAI,CAACW,SAAS,CAACF,aAAa,CAAC;EAC/C;;EAEAZ,YAAY,CAACe,OAAO,CAAC,cAAc,EAACF,aAAa,CAAC;EAClD;;EAEA;AAEJ,CAAC;AAED,MAAMG,YAAY,GAAE1B,MAAM,IAAG;EACzB,MAAMS,oBAAoB,GAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAE/D,MAAMC,cAAc,GAACC,IAAI,CAACC,KAAK,CAACL,oBAAoB,CAAC;EACrDO,OAAO,CAACC,GAAG,CAACL,cAAc,CAAC;EAC3BA,cAAc,CAACR,OAAO,CAAC,UAASuB,IAAI,EAACC,KAAK,EAACC,KAAK,EAC5C;IAEI,IAAIF,IAAI,CAACR,MAAM,IAAEnB,MAAM,EACvB;MAEI6B,KAAK,CAACC,MAAM,CAACF,KAAK,EAAC,CAAC,CAAC;IACzB;EAEJ,CAAC,CAAC;EACFZ,OAAO,CAACC,GAAG,CAACL,cAAc,CAAC;EAC3B,OAAOA,cAAc;AAC7B,CAAC;AAGD,SAAQb,QAAQ,EAACqB,iBAAiB,EAACM,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}