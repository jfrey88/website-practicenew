{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst comments = async idPost => {\n  //const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${idPost}/comments`);\n  //const data = await response.json();  \n\n  let data = [];\n  const tabRec = getCommentsForPost(idPost);\n  tabRec.forEach(element => {\n    element.id = data.length + 1;\n    data.push(element);\n  });\n  //data.push(rec);\n  return data;\n};\nconst getCommentsForPost = idPost => {\n  const chaineTabCommentaire = localStorage.getItem(\"commentaires\");\n  const tabCommentaire = JSON.parse(chaineTabCommentaire);\n  let tabCommentaireDeLid = [];\n  for (let i = 0; i < tabCommentaire.length; i++) {\n    if (tabCommentaire[i].postId == idPost) {\n      tabCommentaireDeLid.push(tabCommentaire[i]);\n    }\n  }\n  return tabCommentaireDeLid;\n};\nconst addCommentForPost = (idPost, comment) => {\n  //on stringify le commentaire, son auteur et l'email\n\n  let tabAncienPost = getCommentsForPost(idPost);\n  comment.postId = idPost;\n  tabAncienPost.push(comment);\n  let chaineComment = JSON.stringify(tabAncienPost);\n  localStorage.setItem(\"commentaires\", chaineComment);\n  //on lit ce qui est dejà dans les commentaire\n\n  //localStorage.setItem(\"lastname\", comment.value.lastname);\n};\nconst clearComment = idPost => {\n  const chaineTabCommentaire = localStorage.getItem(\"commentaires\");\n  const tabCommentaire = JSON.parse(chaineTabCommentaire);\n  tabCommentaire.forEach(function (item, index, objet) {\n    if (item.postId == idPost) {\n      objet.splice(index, 1);\n    }\n  });\n  let chaineComment = JSON.stringify(tabCommentaire);\n  localStorage.setItem(\"commentaires\", chaineComment);\n  return;\n};\nexport { comments, addCommentForPost, clearComment };","map":{"version":3,"names":["comments","idPost","data","tabRec","getCommentsForPost","forEach","element","id","length","push","chaineTabCommentaire","localStorage","getItem","tabCommentaire","JSON","parse","tabCommentaireDeLid","i","postId","addCommentForPost","comment","tabAncienPost","chaineComment","stringify","setItem","clearComment","item","index","objet","splice"],"sources":["C:/Users/jfrey/Dropbox/cours/_webdev/code/semaine 4/lundi/website-practice/src/models/comments.js"],"sourcesContent":["const comments = async(idPost)=>{       \r\n    //const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${idPost}/comments`);\r\n    //const data = await response.json();  \r\n   \r\n    let data=[];\r\n    const tabRec=getCommentsForPost(idPost);\r\n     \r\n    tabRec.forEach((element) =>{\r\n        element.id=data.length+1;\r\n     \r\n        data.push(element)\r\n    })\r\n    //data.push(rec);\r\n    return data;\r\n}\r\n\r\nconst getCommentsForPost=(idPost)=>{\r\n    const chaineTabCommentaire=localStorage.getItem(\"commentaires\");\r\n    \r\n    const tabCommentaire=JSON.parse(chaineTabCommentaire);\r\n    \r\n    let tabCommentaireDeLid=[];\r\n\r\n    for(let i=0;i<tabCommentaire.length;i++)\r\n    {\r\n       \r\n        if (tabCommentaire[i].postId==idPost)\r\n        {\r\n            tabCommentaireDeLid.push(tabCommentaire[i]);\r\n        }\r\n        \r\n    }\r\n  \r\n    return tabCommentaireDeLid\r\n}\r\n\r\nconst addCommentForPost=(idPost,comment)=>{\r\n  \r\n\r\n    //on stringify le commentaire, son auteur et l'email\r\n    \r\n\r\n    let tabAncienPost= getCommentsForPost(idPost);\r\n    comment.postId=idPost;\r\n    tabAncienPost.push(comment);\r\n   \r\n    let chaineComment=JSON.stringify(tabAncienPost);\r\n\r\n\r\n    localStorage.setItem(\"commentaires\",chaineComment)\r\n    //on lit ce qui est dejà dans les commentaire\r\n\r\n    //localStorage.setItem(\"lastname\", comment.value.lastname);\r\n\r\n}\r\n\r\nconst clearComment=(idPost)=>{\r\n    const chaineTabCommentaire=localStorage.getItem(\"commentaires\");\r\n    \r\n    const tabCommentaire=JSON.parse(chaineTabCommentaire);\r\n\r\n    tabCommentaire.forEach(function(item,index,objet)\r\n        {\r\n            \r\n            if (item.postId==idPost)\r\n            {\r\n                \r\n                objet.splice(index,1);\r\n            }\r\n           \r\n        })\r\n       \r\n        let chaineComment=JSON.stringify(tabCommentaire);\r\n        localStorage.setItem(\"commentaires\",chaineComment)\r\n        return  \r\n}\r\n\r\n\r\nexport {comments,addCommentForPost,clearComment}"],"mappings":";AAAA,MAAMA,QAAQ,GAAG,MAAMC,MAAM,IAAG;EAC5B;EACA;;EAEA,IAAIC,IAAI,GAAC,EAAE;EACX,MAAMC,MAAM,GAACC,kBAAkB,CAACH,MAAM,CAAC;EAEvCE,MAAM,CAACE,OAAO,CAAEC,OAAO,IAAI;IACvBA,OAAO,CAACC,EAAE,GAACL,IAAI,CAACM,MAAM,GAAC,CAAC;IAExBN,IAAI,CAACO,IAAI,CAACH,OAAO,CAAC;EACtB,CAAC,CAAC;EACF;EACA,OAAOJ,IAAI;AACf,CAAC;AAED,MAAME,kBAAkB,GAAEH,MAAM,IAAG;EAC/B,MAAMS,oBAAoB,GAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAE/D,MAAMC,cAAc,GAACC,IAAI,CAACC,KAAK,CAACL,oBAAoB,CAAC;EAErD,IAAIM,mBAAmB,GAAC,EAAE;EAE1B,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,cAAc,CAACL,MAAM,EAACS,CAAC,EAAE,EACvC;IAEI,IAAIJ,cAAc,CAACI,CAAC,CAAC,CAACC,MAAM,IAAEjB,MAAM,EACpC;MACIe,mBAAmB,CAACP,IAAI,CAACI,cAAc,CAACI,CAAC,CAAC,CAAC;IAC/C;EAEJ;EAEA,OAAOD,mBAAmB;AAC9B,CAAC;AAED,MAAMG,iBAAiB,GAACA,CAAClB,MAAM,EAACmB,OAAO,KAAG;EAGtC;;EAGA,IAAIC,aAAa,GAAEjB,kBAAkB,CAACH,MAAM,CAAC;EAC7CmB,OAAO,CAACF,MAAM,GAACjB,MAAM;EACrBoB,aAAa,CAACZ,IAAI,CAACW,OAAO,CAAC;EAE3B,IAAIE,aAAa,GAACR,IAAI,CAACS,SAAS,CAACF,aAAa,CAAC;EAG/CV,YAAY,CAACa,OAAO,CAAC,cAAc,EAACF,aAAa,CAAC;EAClD;;EAEA;AAEJ,CAAC;AAED,MAAMG,YAAY,GAAExB,MAAM,IAAG;EACzB,MAAMS,oBAAoB,GAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAE/D,MAAMC,cAAc,GAACC,IAAI,CAACC,KAAK,CAACL,oBAAoB,CAAC;EAErDG,cAAc,CAACR,OAAO,CAAC,UAASqB,IAAI,EAACC,KAAK,EAACC,KAAK,EAC5C;IAEI,IAAIF,IAAI,CAACR,MAAM,IAAEjB,MAAM,EACvB;MAEI2B,KAAK,CAACC,MAAM,CAACF,KAAK,EAAC,CAAC,CAAC;IACzB;EAEJ,CAAC,CAAC;EAEF,IAAIL,aAAa,GAACR,IAAI,CAACS,SAAS,CAACV,cAAc,CAAC;EAChDF,YAAY,CAACa,OAAO,CAAC,cAAc,EAACF,aAAa,CAAC;EAClD;AACR,CAAC;AAGD,SAAQtB,QAAQ,EAACmB,iBAAiB,EAACM,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}