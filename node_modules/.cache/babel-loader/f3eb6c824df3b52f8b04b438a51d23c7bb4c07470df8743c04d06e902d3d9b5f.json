{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore } from \"pinia\";\nconst useCommentStore = defineStore('comment', {\n  // state est une fonction afin d'être réactive\n  // State représente la partie principale du store, \n  // c'est l'endroit qui va contenir la structure de données de l'application.\n  state: () => {\n    return {\n      comments: []\n    };\n  },\n  // Les getters représentent des methodes \n  // permettant de récupérer des données du store et \n  // de les manipuler avant sans les modifier.\n  getters: {},\n  //les actions représentent les manipulatuions de données\n  // qui vont être effectuées sur le store.\n  actions: {\n    addCommentForPost(idPost, commentaire) {\n      //on stringify le commentaire, son auteur et l'email\n\n      // let \n      let tabAncienPost = this.getCommentsForPost(idPost);\n      if (tabAncienPost === undefined) {\n        tabAncienPost = [];\n      }\n      //  console.log(\"addCommentForPost--------------- tabAncienPost -----------------------\");\n      //  console.log(tabAncienPost);\n      commentaire.postId = idPost;\n      tabAncienPost.push(commentaire);\n      //  console.log(\"addCommentForPost--------------- tabAncienPost avec le nouveau commentaire -----------------------\");\n      //  console.log(tabAncienPost);\n      let chaineComment = JSON.stringify(tabAncienPost);\n      localStorage.setItem(\"commentaires\", chaineComment);\n      location.reload();\n    },\n    //  \n\n    //  \n    //on lit ce qui est dejà dans les commentaire\n\n    //localStorage.setItem(\"lastname\", comment.value.lastname);\n\n    getCommentsForPost(id) {\n      const chaineTabCommentaire = localStorage.getItem(\"commentaires\");\n      // console.log(\"getCommentsForPost--------------- chaineTabCommentaire -----------------------\");\n      // console.log(chaineTabCommentaire);\n      const tabCommentaire = JSON.parse(chaineTabCommentaire);\n      // console.log(\"getCommentsForPost--------------- tabCommentDuPost -----------------------\");\n      const tabCommentDuPost = tabCommentaire.filter(elt => elt.postId == id);\n      // console.log(tabCommentDuPost);\n\n      return tabCommentDuPost;\n    }\n  }\n});\nexport { useCommentStore };","map":{"version":3,"names":["defineStore","useCommentStore","state","comments","getters","actions","addCommentForPost","idPost","commentaire","tabAncienPost","getCommentsForPost","undefined","postId","push","chaineComment","JSON","stringify","localStorage","setItem","location","reload","id","chaineTabCommentaire","getItem","tabCommentaire","parse","tabCommentDuPost","filter","elt"],"sources":["C:/Users/jfrey/Dropbox/cours/_webdev/code/semaine 4/lundi/website-practice/src/stores/comment.js"],"sourcesContent":["import { defineStore } from \"pinia\";\r\n\r\nconst useCommentStore = defineStore('comment', {\r\n  // state est une fonction afin d'être réactive\r\n  // State représente la partie principale du store, \r\n  // c'est l'endroit qui va contenir la structure de données de l'application.\r\n  state: () => {\r\n    return {\r\n      comments: [],\r\n    };\r\n  },\r\n  // Les getters représentent des methodes \r\n  // permettant de récupérer des données du store et \r\n  // de les manipuler avant sans les modifier.\r\n  getters: {\r\n\r\n\r\n  },\r\n  //les actions représentent les manipulatuions de données\r\n  // qui vont être effectuées sur le store.\r\n  actions: {\r\n     addCommentForPost(idPost,commentaire){\r\n  \r\n   \r\n       //on stringify le commentaire, son auteur et l'email\r\n       \r\n     // let \r\n       let tabAncienPost= this.getCommentsForPost(idPost);\r\n       if (tabAncienPost===undefined)\r\n       {\r\n        tabAncienPost=[];\r\n       }\r\n      //  console.log(\"addCommentForPost--------------- tabAncienPost -----------------------\");\r\n      //  console.log(tabAncienPost);\r\n       commentaire.postId=idPost;\r\n       tabAncienPost.push(commentaire);\r\n      //  console.log(\"addCommentForPost--------------- tabAncienPost avec le nouveau commentaire -----------------------\");\r\n      //  console.log(tabAncienPost);\r\n       let chaineComment=JSON.stringify(tabAncienPost);\r\n       localStorage.setItem(\"commentaires\",chaineComment)\r\n       location.reload();\r\n       },\r\n        \r\n      \r\n   \r\n      //  \r\n   \r\n   \r\n      //  \r\n       //on lit ce qui est dejà dans les commentaire\r\n   \r\n       //localStorage.setItem(\"lastname\", comment.value.lastname);\r\n   \r\n   \r\n    getCommentsForPost(id){\r\n      const chaineTabCommentaire=localStorage.getItem(\"commentaires\");\r\n      // console.log(\"getCommentsForPost--------------- chaineTabCommentaire -----------------------\");\r\n      // console.log(chaineTabCommentaire);\r\n      const tabCommentaire=JSON.parse(chaineTabCommentaire);\r\n      // console.log(\"getCommentsForPost--------------- tabCommentDuPost -----------------------\");\r\n      const tabCommentDuPost=tabCommentaire.filter(elt => elt.postId==id)\r\n      // console.log(tabCommentDuPost);\r\n      \r\n  \r\n    return tabCommentDuPost\r\n}\r\n  },\r\n});\r\nexport {useCommentStore};"],"mappings":";AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,MAAMC,eAAe,GAAGD,WAAW,CAAC,SAAS,EAAE;EAC7C;EACA;EACA;EACAE,KAAK,EAAEA,CAAA,KAAM;IACX,OAAO;MACLC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD;EACA;EACA;EACAC,OAAO,EAAE,CAGT,CAAC;EACD;EACA;EACAC,OAAO,EAAE;IACNC,iBAAiBA,CAACC,MAAM,EAACC,WAAW,EAAC;MAGnC;;MAEF;MACE,IAAIC,aAAa,GAAE,IAAI,CAACC,kBAAkB,CAACH,MAAM,CAAC;MAClD,IAAIE,aAAa,KAAGE,SAAS,EAC7B;QACCF,aAAa,GAAC,EAAE;MACjB;MACD;MACA;MACCD,WAAW,CAACI,MAAM,GAACL,MAAM;MACzBE,aAAa,CAACI,IAAI,CAACL,WAAW,CAAC;MAChC;MACA;MACC,IAAIM,aAAa,GAACC,IAAI,CAACC,SAAS,CAACP,aAAa,CAAC;MAC/CQ,YAAY,CAACC,OAAO,CAAC,cAAc,EAACJ,aAAa,CAAC;MAClDK,QAAQ,CAACC,MAAM,CAAC,CAAC;IACjB,CAAC;IAIF;;IAGA;IACC;;IAEA;;IAGHV,kBAAkBA,CAACW,EAAE,EAAC;MACpB,MAAMC,oBAAoB,GAACL,YAAY,CAACM,OAAO,CAAC,cAAc,CAAC;MAC/D;MACA;MACA,MAAMC,cAAc,GAACT,IAAI,CAACU,KAAK,CAACH,oBAAoB,CAAC;MACrD;MACA,MAAMI,gBAAgB,GAACF,cAAc,CAACG,MAAM,CAACC,GAAG,IAAIA,GAAG,CAAChB,MAAM,IAAES,EAAE,CAAC;MACnE;;MAGF,OAAOK,gBAAgB;IAC3B;EACE;AACF,CAAC,CAAC;AACF,SAAQzB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}