{"ast":null,"code":"import { withAsyncContext as _withAsyncContext } from 'vue';\nimport { ref } from 'vue';\n//const posts = ref([]);\nimport { useRoute } from 'vue-router';\nexport default {\n  __name: 'PostView',\n  async setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    let __temp, __restore;\n    const route = useRoute();\n    const id = route.params.id;\n    const response = ([__temp, __restore] = _withAsyncContext(() => fetch(`https://jsonplaceholder.typicode.com/posts/${id}`)), __temp = await __temp, __restore(), __temp);\n    const data = ([__temp, __restore] = _withAsyncContext(() => response.json()), __temp = await __temp, __restore(), __temp);\n    const posts = ref([]);\n    const fetchPosts2 = async () => {\n      const response2 = await fetch(`https://jsonplaceholder.typicode.com/posts/${id}/comments`);\n      const data2 = await response2.json();\n      console.log(data2);\n      posts.value = data2;\n    };\n    fetchPosts2();\n    const __returned__ = {\n      route,\n      id,\n      response,\n      data,\n      posts,\n      fetchPosts2,\n      ref,\n      get useRoute() {\n        return useRoute;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","useRoute","route","id","params","response","__temp","__restore","_withAsyncContext","fetch","data","json","posts","fetchPosts2","response2","data2","console","log","value"],"sources":["C:/Users/jfrey/Dropbox/cours/_webdev/code/semaine 3/jeudi/website-practice/src/views/PostView.vue"],"sourcesContent":["<template>\r\n    <div class=\"home\">\r\n        <v-card class=\"w-250 pa-4\">\r\n            <v-img\r\n            height=\"200px\"\r\n            :src=\"`https://picsum.photos/200/300?random=${id}`\"\r\n            \r\n            cover\r\n            ></v-img>\r\n            <v-card-title>{{ data.title }}</v-card-title>\r\n            <v-card-text>{{ data.body }}</v-card-text>\r\n            <v-card-actions>\r\n                <v-btn\r\n                    color=\"orange-lighten-2\"\r\n                    text = \"Retour\"\r\n                    :to=\"{ name: 'home' }\"\r\n                ></v-btn>\r\n            </v-card-actions>\r\n        </v-card>\r\n        <h2 class=\"pa-4\">COMMENTAIRES</h2>\r\n        <v-row>\r\n            <v-card v-for=\"post in posts\" :key=\"post.id\" class=\"w-100 pa-4\">\r\n               \r\n                <v-card-title>{{ post.name+\" \"+post.email }}</v-card-title>\r\n                <v-card-text>{{ post.body }}</v-card-text>\r\n                \r\n            </v-card>\r\n        </v-row>\r\n    </div>\r\n</template>\r\n<script setup>\r\n  import { ref } from 'vue';\r\n  //const posts = ref([]);\r\n  import {useRoute } from 'vue-router';\r\n\r\n  const route = useRoute();\r\n  const id=route.params.id;\r\n  const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${id}`);\r\n  const data = await response.json();  \r\n\r\n\r\n\r\n    const posts = ref([]);\r\n    const fetchPosts2 = async () =>{\r\n    const response2 = await fetch(`https://jsonplaceholder.typicode.com/posts/${id}/comments`);\r\n    const data2 = await response2.json();  \r\n    console.log(data2);\r\n    posts.value=data2;\r\n    };\r\n    fetchPosts2();\r\n</script>"],"mappings":";AA+BE,SAASA,GAAG,QAAQ,KAAK;AACzB;AACA,SAAQC,QAAQ,QAAQ,YAAY;;;;;;;;IAEpC,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC;IACxB,MAAME,EAAE,GAACD,KAAK,CAACE,MAAM,CAACD,EAAE;IACxB,MAAME,QAAQ,IAAG,CAAAC,MAAA,EAAAC,SAAA,IAAAC,iBAAA,OAAMC,KAAK,CAAC,8CAA8CN,EAAE,EAAE,I,2CAAC;IAChF,MAAMO,IAAI,IAAG,CAAAJ,MAAA,EAAAC,SAAA,IAAAC,iBAAA,OAAMH,QAAQ,CAACM,IAAI,CAAC,I,2CAAC;IAIhC,MAAMC,KAAK,GAAGZ,GAAG,CAAC,EAAE,CAAC;IACrB,MAAMa,WAAW,GAAG,MAAAA,CAAA,KAAW;MAC/B,MAAMC,SAAS,GAAG,MAAML,KAAK,CAAC,8CAA8CN,EAAE,WAAW,CAAC;MAC1F,MAAMY,KAAK,GAAG,MAAMD,SAAS,CAACH,IAAI,CAAC,CAAC;MACpCK,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClBH,KAAK,CAACM,KAAK,GAACH,KAAK;IACjB,CAAC;IACDF,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}