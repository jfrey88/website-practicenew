{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore } from \"pinia\";\nimport { useTopicStore } from '@/stores/topic';\nconst usePostStore = defineStore('post', {\n  // state est une fonction afin d'être réactive\n  // State représente la partie principale du store, \n  // c'est l'endroit qui va contenir la structure de données de l'application.\n  state: () => {\n    return {\n      posts: [],\n      post: {}\n    };\n  },\n  // Les getters représentent des methodes \n  // permettant de récupérer des données du store et \n  // de les manipuler avant sans les modifier.\n  getters: {\n    formattedPosts() {\n      return this.sortPosts.map(post => {\n        return {\n          title: post.Titre,\n          body: post.Description,\n          image: post.Image,\n          topic: post.Topic,\n          topicText: post.TopicText,\n          id: post.id\n        };\n      });\n    },\n    formattedPost() {\n      return {\n        title: this.post.Titre,\n        body: this.post.Description,\n        image: this.post.Image\n      };\n    },\n    sortPosts(state) {\n      return state.posts.sort((a, b) => a.Titre.localeCompare(b.Titre));\n    },\n    colorPost: () => {\n      return topic => {\n        const topicStore = useTopicStore();\n        return topicStore.getTopicColor(topic);\n      };\n    }\n  },\n  //les actions représentent les manipulatuions de données\n  // qui vont être effectuées sur le store.\n  actions: {\n    // cette fonction récupère tous les posts\n    async fetchPosts() {\n      const response = await fetch('https://tall-otter-40.telebit.io/posts/all');\n      const posts = await response.json();\n      const topicStore = useTopicStore();\n      const addTopicField = () => {\n        const arrayPosts = [];\n        let id = 0;\n        const keys = Object.keys(posts);\n        keys.forEach(topic => {\n          const tabTopicEnCours = posts[topic];\n          tabTopicEnCours.forEach(article => {\n            article.Topic = topicStore.getTopicIndex(topic);\n            article.TopicText = topic;\n            article.id = id;\n            arrayPosts.push(article);\n            id++;\n          });\n        });\n        return arrayPosts;\n      };\n      this.posts = addTopicField();\n    },\n    // cette fonction récupère tous les posts d'un topic\n    async fetchPostsForTopic(topicDemande) {\n      const response = await fetch('https://tall-otter-40.telebit.io/posts/all');\n      const posts = await response.json();\n      const topicStore = useTopicStore();\n      const addTopicField = () => {\n        const arrayPosts = [];\n        let id = 0;\n        const keys = Object.keys(posts);\n        keys.forEach(topic => {\n          const tabTopicEnCours = posts[topic];\n          tabTopicEnCours.forEach(article => {\n            article.Topic = topicStore.getTopicIndex(topic);\n            article.TopicText = topic;\n            article.id = id;\n            arrayPosts.push(article);\n            id++;\n          });\n        });\n        return arrayPosts.filter(post => post.TopicText == topicDemande);\n      };\n      this.posts = addTopicField(topicDemande);\n    },\n    // cette fonction récupère un  post a l index idPost\n    async fetchOnePost(idPost) {\n      const response = await fetch('https://tall-otter-40.telebit.io/posts/all');\n      const posts = await response.json();\n      const topicStore = useTopicStore();\n      const addTopicField = () => {\n        const arrayPosts = [];\n        let id = 0;\n        const keys = Object.keys(posts);\n        keys.forEach(topic => {\n          const tabTopicEnCours = posts[topic];\n          tabTopicEnCours.forEach(article => {\n            article.Topic = topicStore.getTopicIndex(topic);\n            article.TopicText = topic;\n            article.id = id;\n            arrayPosts.push(article);\n            id++;\n          });\n        });\n        return arrayPosts;\n      };\n      this.posts = addTopicField();\n      this.post = this.posts[idPost];\n    }\n  }\n});\nexport { usePostStore };","map":{"version":3,"names":["defineStore","useTopicStore","usePostStore","state","posts","post","getters","formattedPosts","sortPosts","map","title","Titre","body","Description","image","Image","topic","Topic","topicText","TopicText","id","formattedPost","sort","a","b","localeCompare","colorPost","topicStore","getTopicColor","actions","fetchPosts","response","fetch","json","addTopicField","arrayPosts","keys","Object","forEach","tabTopicEnCours","article","getTopicIndex","push","fetchPostsForTopic","topicDemande","filter","fetchOnePost","idPost"],"sources":["C:/Users/jfrey/Dropbox/cours/_webdev/code/semaine 4/lundi/website-practice/src/stores/post.js"],"sourcesContent":["import { defineStore } from \"pinia\";\r\nimport { useTopicStore } from '@/stores/topic';\r\n\r\n\r\nconst usePostStore = defineStore('post', {\r\n  // state est une fonction afin d'être réactive\r\n  // State représente la partie principale du store, \r\n  // c'est l'endroit qui va contenir la structure de données de l'application.\r\n  state: () => {\r\n    return {\r\n      posts: [],\r\n      post:{},\r\n    };\r\n  },\r\n  // Les getters représentent des methodes \r\n  // permettant de récupérer des données du store et \r\n  // de les manipuler avant sans les modifier.\r\n  getters: {\r\n    formattedPosts(){\r\n      return this.sortPosts.map(post =>{\r\n        return{\r\n          title : post.Titre,\r\n          body : post.Description,\r\n          image: post.Image,\r\n          topic : post.Topic,\r\n          topicText : post.TopicText,\r\n          id : post.id\r\n        }\r\n      })\r\n    },\r\n    formattedPost(){\r\n       \r\n        return{\r\n          title : this.post.Titre,\r\n          body : this.post.Description,\r\n          image: this.post.Image\r\n        }\r\n     \r\n    },\r\n    sortPosts(state){\r\n      return state.posts.sort((a,b)=>a.Titre.localeCompare(b.Titre));\r\n    },\r\n    colorPost:()=>{\r\n      return (topic)=>{\r\n        const topicStore = useTopicStore();\r\n     \r\n        return topicStore.getTopicColor(topic);\r\n      }\r\n     \r\n    },\r\n   \r\n    \r\n    \r\n\r\n  },\r\n  //les actions représentent les manipulatuions de données\r\n  // qui vont être effectuées sur le store.\r\n  actions: {\r\n    // cette fonction récupère tous les posts\r\n    async fetchPosts() {\r\n      \r\n      const response = await fetch('https://tall-otter-40.telebit.io/posts/all');\r\n      const posts = await response.json();\r\n\r\n      const topicStore = useTopicStore();\r\n      \r\n      const addTopicField=()=>{\r\n       \r\n        const arrayPosts=[];\r\n        let id=0;\r\n        const keys=Object.keys(posts);\r\n        keys.forEach((topic)=>{\r\n          const tabTopicEnCours=posts[topic];\r\n          tabTopicEnCours.forEach((article)=>{\r\n             article.Topic = topicStore.getTopicIndex(topic);\r\n             article.TopicText = topic;\r\n             article.id=id;\r\n             arrayPosts.push(article);\r\n             id++;\r\n          })\r\n          \r\n        })\r\n        return arrayPosts\r\n           \r\n      }\r\n      this.posts = addTopicField();\r\n      },\r\n\r\n     // cette fonction récupère tous les posts d'un topic\r\n          async fetchPostsForTopic(topicDemande) {\r\n        \r\n         \r\n          const response = await fetch('https://tall-otter-40.telebit.io/posts/all');\r\n          const posts = await response.json();\r\n    \r\n          const topicStore = useTopicStore();\r\n          \r\n          const addTopicField=()=>{\r\n           \r\n            const arrayPosts=[];\r\n            let id=0;\r\n            const keys=Object.keys(posts);\r\n            keys.forEach((topic)=>{\r\n              const tabTopicEnCours=posts[topic];\r\n              tabTopicEnCours.forEach((article)=>{\r\n                 article.Topic = topicStore.getTopicIndex(topic);\r\n                 article.TopicText = topic;\r\n                 article.id=id;\r\n                 arrayPosts.push(article);\r\n                 id++;\r\n              })\r\n              \r\n            })\r\n            \r\n         \r\n            return arrayPosts.filter(post => post.TopicText == topicDemande);\r\n              \r\n          }\r\n        this.posts = addTopicField(topicDemande);\r\n        \r\n    },\r\n    // cette fonction récupère un  post a l index idPost\r\n    async fetchOnePost(idPost) {\r\n        \r\n      const response = await fetch('https://tall-otter-40.telebit.io/posts/all');\r\n      const posts = await response.json();\r\n\r\n      const topicStore = useTopicStore();\r\n      \r\n      const addTopicField=()=>{\r\n       \r\n        const arrayPosts=[];\r\n        let id=0;\r\n        const keys=Object.keys(posts);\r\n        keys.forEach((topic)=>{\r\n          const tabTopicEnCours=posts[topic];\r\n          tabTopicEnCours.forEach((article)=>{\r\n             article.Topic = topicStore.getTopicIndex(topic);\r\n             article.TopicText = topic;\r\n             article.id=id;\r\n             arrayPosts.push(article);\r\n             id++;\r\n          })\r\n          \r\n        })\r\n        return arrayPosts\r\n           \r\n      }\r\n      this.posts = addTopicField();\r\n    \r\n      this.post=this.posts[idPost];\r\n     \r\n\r\n  \r\n      \r\n    },\r\n  },\r\n   \r\n\r\n  \r\n});\r\nexport {usePostStore};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}