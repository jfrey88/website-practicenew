{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst comments = async idPost => {\n  const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${idPost}/comments`);\n  const data = await response.json();\n  console.log(data);\n  const tabRec = getCommentsForPost(idPost);\n  console.log(tabRec);\n\n  //data.push(rec);\n  return data;\n};\nconst getCommentsForPost = idPost => {\n  const chaineTabCommentaire = localStorage.getItem(\"commentaires\");\n  console.log(chaineTabCommentaire);\n  const tabCommentaire = JSON.parse(chaineTabCommentaire);\n  let tabCommentaireDeLid = [];\n  for (let i = 0; i < tabCommentaire.length; i++) {\n    if (tabCommentaire[i].postId == idPost) ;\n    {\n      tabCommentaireDeLid.push(tabCommentaire[i]);\n    }\n  }\n  return tabCommentaireDeLid;\n};\nconst addCommentForPost = (idPost, comment) => {\n  console.log(\"le commentaire brut \", comment);\n\n  //on stringify le commentaire, son auteur et l'email\n  let chaineComment = JSON.stringify(comment);\n  console.log(\"le commentaire en string \", chaineComment);\n  chaineComment = '[' + chaineComment[0] + '\"postId\":\"' + idPost + '\",' + chaineComment.substring(1, chaineComment.length) + ']';\n  console.log(\"le commentaire en string avec id\", chaineComment);\n  localStorage.setItem(\"commentaires\", chaineComment);\n  //on lit ce qui est dejà dans les commentaire\n\n  //localStorage.setItem(\"lastname\", comment.value.lastname);\n};\nexport { comments, addCommentForPost };","map":{"version":3,"names":["comments","idPost","response","fetch","data","json","console","log","tabRec","getCommentsForPost","chaineTabCommentaire","localStorage","getItem","tabCommentaire","JSON","parse","tabCommentaireDeLid","i","length","postId","push","addCommentForPost","comment","chaineComment","stringify","substring","setItem"],"sources":["C:/Users/jfrey/Dropbox/cours/_webdev/code/semaine 3/jeudi/website-practice/src/models/comments.js"],"sourcesContent":["const comments = async(idPost)=>{       \r\n    const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${idPost}/comments`);\r\n    const data = await response.json();  \r\n    console.log(data)\r\n\r\n    const tabRec=getCommentsForPost(idPost)\r\n    console.log(tabRec);    \r\n\r\n    //data.push(rec);\r\n    return data;\r\n}\r\n\r\nconst getCommentsForPost=(idPost)=>{\r\n    const chaineTabCommentaire=localStorage.getItem(\"commentaires\");\r\n    console.log(chaineTabCommentaire);\r\n    const tabCommentaire=JSON.parse(chaineTabCommentaire);\r\n    \r\n    let tabCommentaireDeLid=[];\r\n    for(let i=0;i<tabCommentaire.length;i++)\r\n    {\r\n        if (tabCommentaire[i].postId==idPost);\r\n        {\r\n            tabCommentaireDeLid.push(tabCommentaire[i]);\r\n        }\r\n    }\r\n  \r\n    return tabCommentaireDeLid\r\n}\r\n\r\nconst addCommentForPost=(idPost,comment)=>{\r\n    console.log(\"le commentaire brut \",comment);\r\n\r\n    //on stringify le commentaire, son auteur et l'email\r\n    let chaineComment=JSON.stringify(comment);\r\n    console.log(\"le commentaire en string \",chaineComment);\r\n    chaineComment ='['+chaineComment[0]+'\"postId\":\"'+idPost+'\",'+chaineComment.substring(1, chaineComment.length)+']';\r\n    console.log(\"le commentaire en string avec id\",chaineComment);\r\n\r\n    localStorage.setItem(\"commentaires\",chaineComment)\r\n    //on lit ce qui est dejà dans les commentaire\r\n\r\n    //localStorage.setItem(\"lastname\", comment.value.lastname);\r\n\r\n}\r\n\r\n\r\nexport {comments,addCommentForPost}"],"mappings":";AAAA,MAAMA,QAAQ,GAAG,MAAMC,MAAM,IAAG;EAC5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8CAA8CF,MAAM,WAAW,CAAC;EAC7F,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EAEjB,MAAMI,MAAM,GAACC,kBAAkB,CAACR,MAAM,CAAC;EACvCK,OAAO,CAACC,GAAG,CAACC,MAAM,CAAC;;EAEnB;EACA,OAAOJ,IAAI;AACf,CAAC;AAED,MAAMK,kBAAkB,GAAER,MAAM,IAAG;EAC/B,MAAMS,oBAAoB,GAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAC/DN,OAAO,CAACC,GAAG,CAACG,oBAAoB,CAAC;EACjC,MAAMG,cAAc,GAACC,IAAI,CAACC,KAAK,CAACL,oBAAoB,CAAC;EAErD,IAAIM,mBAAmB,GAAC,EAAE;EAC1B,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,cAAc,CAACK,MAAM,EAACD,CAAC,EAAE,EACvC;IACI,IAAIJ,cAAc,CAACI,CAAC,CAAC,CAACE,MAAM,IAAElB,MAAM,EAAC;IACrC;MACIe,mBAAmB,CAACI,IAAI,CAACP,cAAc,CAACI,CAAC,CAAC,CAAC;IAC/C;EACJ;EAEA,OAAOD,mBAAmB;AAC9B,CAAC;AAED,MAAMK,iBAAiB,GAACA,CAACpB,MAAM,EAACqB,OAAO,KAAG;EACtChB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAACe,OAAO,CAAC;;EAE3C;EACA,IAAIC,aAAa,GAACT,IAAI,CAACU,SAAS,CAACF,OAAO,CAAC;EACzChB,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAACgB,aAAa,CAAC;EACtDA,aAAa,GAAE,GAAG,GAACA,aAAa,CAAC,CAAC,CAAC,GAAC,YAAY,GAACtB,MAAM,GAAC,IAAI,GAACsB,aAAa,CAACE,SAAS,CAAC,CAAC,EAAEF,aAAa,CAACL,MAAM,CAAC,GAAC,GAAG;EACjHZ,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAACgB,aAAa,CAAC;EAE7DZ,YAAY,CAACe,OAAO,CAAC,cAAc,EAACH,aAAa,CAAC;EAClD;;EAEA;AAEJ,CAAC;AAGD,SAAQvB,QAAQ,EAACqB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}